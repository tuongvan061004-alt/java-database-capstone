package com.project.backend.service;

import com.project.backend.model.Appointment;
import com.project.backend.model.Doctor;
import com.project.backend.model.Patient;
import com.project.backend.repository.AppointmentRepository;
import com.project.backend.repository.DoctorRepository;
import com.project.backend.repository.PatientRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * ‚úÖ AppointmentService
 * X·ª≠ l√Ω nghi·ªáp v·ª• qu·∫£n l√Ω v√† ƒë·∫∑t l·ªãch h·∫πn gi·ªØa b√°c sƒ© v√† b·ªánh nh√¢n.
 */
@Service
public class AppointmentService {

    @Autowired
    private AppointmentRepository appointmentRepository;

    @Autowired
    private DoctorRepository doctorRepository;

    @Autowired
    private PatientRepository patientRepository;

    /**
     * ‚úÖ L·∫•y t·∫•t c·∫£ c√°c l·ªãch h·∫πn trong h·ªá th·ªëng.
     */
    public List<Appointment> getAllAppointments() {
        return appointmentRepository.findAll();
    }

    /**
     * ‚úÖ T√¨m l·ªãch h·∫πn theo ID.
     */
    public Optional<Appointment> getAppointmentById(Long id) {
        return appointmentRepository.findById(id);
    }

    /**
     * ‚úÖ L∆∞u ho·∫∑c c·∫≠p nh·∫≠t l·ªãch h·∫πn.
     */
    public Appointment saveAppointment(Appointment appointment) {
        return appointmentRepository.save(appointment);
    }

    /**
     * ‚úÖ X√≥a l·ªãch h·∫πn theo ID.
     */
    public void deleteAppointment(Long id) {
        appointmentRepository.deleteById(id);
    }

    /**
     * ‚úÖ Ph∆∞∆°ng th·ª©c ƒë·∫∑c bi·ªát: ƒê·∫∂T L·ªäCH H·∫∏N (BOOK APPOINTMENT)
     *
     * @param doctorId ID b√°c sƒ©
     * @param patientId ID b·ªánh nh√¢n
     * @param appointmentTime Th·ªùi gian h·∫πn
     * @param notes Ghi ch√∫ th√™m (n·∫øu c√≥)
     * @return Appointment m·ªõi ƒë∆∞·ª£c t·∫°o v√† l∆∞u trong DB
     */
    public Appointment bookAppointment(Long doctorId, Long patientId, LocalDateTime appointmentTime, String notes) {
        // üîπ Ki·ªÉm tra b√°c sƒ© t·ªìn t·∫°i
        Doctor doctor = doctorRepository.findById(doctorId)
                .orElseThrow(() -> new IllegalArgumentException("Doctor not found with ID: " + doctorId));

        // üîπ Ki·ªÉm tra b·ªánh nh√¢n t·ªìn t·∫°i
        Patient patient = patientRepository.findById(patientId)
                .orElseThrow(() -> new IllegalArgumentException("Patient not found with ID: " + patientId));

        // üîπ Ki·ªÉm tra th·ªùi gian h·ª£p l·ªá
        if (appointmentTime.isBefore(LocalDateTime.now())) {
            throw new IllegalArgumentException("Appointment time must be in the future.");
        }

        // üîπ Ki·ªÉm tra xem b√°c sƒ© c√≥ b·ªã tr√πng l·ªãch kh√¥ng
        boolean isDoctorBusy = appointmentRepository.existsByDoctorAndAppointmentTime(doctor, appointmentTime);
        if (isDoctorBusy) {
            throw new IllegalStateException("Doctor is not available at this time.");
        }

        // üîπ T·∫°o l·ªãch h·∫πn m·ªõi
        Appointment appointment = new Appointment(doctor, patient, appointmentTime, notes);

        // üîπ L∆∞u xu·ªëng c∆° s·ªü d·ªØ li·ªáu
        return appointmentRepository.save(appointment);
    }
}
